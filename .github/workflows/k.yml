name: ktye/k

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    
    - name: set date
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
   
    - name: checkout ktye/i
      uses: actions/checkout@v2
      with:
        path: i
   
    - name: checkout wg
      uses: actions/checkout@v2
      with:
        repository: ktye/wg
        path: wg
        
    - name: setup go
      uses: actions/setup-go@v2
      with:
        go-version: '1.17'
    
    - name: install wg
      run: cd wg && go install ./cmd/wg
      
    - name: install wabt
      run: |
        wget https://github.com/WebAssembly/wabt/releases/download/1.0.26/wabt-1.0.26-ubuntu.tar.gz
        tar zxf wabt-1.0.26-ubuntu.tar.gz
        cp wabt-1.0.26/bin/wat2wasm .

    - name: build k
      run: cd i && go build -v
      
    - name: test and install k
      run: cd i && go test && go install
    
    - name: build k.wasm
      run: |
        cd i
        wg             . > k.wat
        ../wat2wasm -o k.wasm k.wat

    - name: k.wasi
      run: cd i/wasi && sh mk && ../../wat2wasm -o k.wasi _k.wat

    - name: k.f
      run: cd i/f77 && sh mk && sh mk test
    
    - name: k.go
      run: cd i/x && wg -k .. > k.k && k k.k go.k -e 'x:`<go`pkg`k' > k.go && go fmt k.go && go build -o kg k.go && ./kg ../k.t -e
    
    - name: kx.go
      run: cd i/kx && sh mk

    - name: kcsv.go
      run: cd i/kcsv && sh mk test

    - name: k.c
      run: cd i/x && k k.k cc.k -e 'x:`<cc``' > k.c && gcc -o kc k.c -lm && ./kc ../k.t -e
    
    - name: k.js
      run: cd i/x && k k.k js.k -e 'x:`<js``' > k.js #test with qjs --std k.js ../k.t -e (takes 2min)
    
    - name: kdb.go
      run: cd i/d && sh mk kdb

    - name: kom
      run: cd i/kom && sh mk && sh mk test
  
#    - name: install k+ dependencies
#      run: sudo apt-get update && sudo apt-get install -y liblapacke-dev libcairo2-dev libsqlite3-dev libasound2-dev mesa-common-dev libx11-dev libxrandr-dev libxi-dev xorg-dev libgl1-mesa-dev libglu1-mesa-dev
#  
#    - name: checkout sqlite
#      uses: actions/checkout@v2
#      with:
#        repository: sqlite/sqlite
#        path: sqlite
#        ref: version-3.37.2
#
#    - name: build sqlite.c
#      run: |
#        mkdir sq
#        cd sq
#        ../sqlite/configure
#        make
#        make sqlite3.c
#        cp sqlite3.c ../i/+
#        
#    - name: checkout raylib
#      uses: actions/checkout@v2
#      with:
#        repository: raysan5/raylib
#        ref: '4.0.0'
#        path: ray
#        
#    - name: build raylib
#      run: |
#        cd ray/src
#        make PLATFORM=PLATFORM_DESKTOP
#        cp ../libraylib.a ../../i/+/
#        cp raylib.h       ../../i/+/ray/
#        cp rgestures.h    ../../i/+/ray/
    
#    - name: build ktye.h
#      run: cd i/+ && sh mk ktye.h
    
#    - name: tar k+
#      run: cd i && tar czf k+.tar.gz +/
          
#    - name: build k+
#      run: |
#        cd i/+
#        sh mk.lin
#        
#    - name: test k+
#      run: |
#        cd i/+
#        ./k+ mat/mat.k -e
#        ./k+ draw/draw.k -e
        
    - name: delete release
      uses: dev-drprasad/delete-older-releases@v0.2.0
      with:
        keep_latest: 0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: latest
        release_name: Release ${{ steps.date.outputs.date }} ${{ github.ref }}
        
    - name: upload k.wasm
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./i/k.wasm
        asset_name: k.wasm
        asset_content_type: application/wasm

    - name: upload k.wasi
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./i/wasi/k.wasi
        asset_name: k.wasi
        asset_content_type: application/wasm
        
    - name: upload k.go
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./i/x/k.go
        asset_name: k.go
        asset_content_type: text/plain
        
    - name: upload k.f
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./i/f77/k.f
        asset_name: k.f
        asset_content_type: text/plain

    - name: upload k.c
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./i/x/k.c
        asset_name: k.c
        asset_content_type: text/plain
        
    - name: upload k.js
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./i/x/k.js
        asset_name: k.js
        asset_content_type: text/plain
    
    - name: upload kdb.go
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./i/d/kdb.go
        asset_name: kdb.go
        asset_content_type: text/plain
  
