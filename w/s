/ kwac
ver:0                      / kwac version
iv:7                       / ⍳/k7 switch, iv is a devvar in ⍳ always returning 1
I:0x7f;F:0x7c;C:0x41       / i32;f64;i32.const
x:0x2000;y:0x2001;z:0x2002 / local.get
e:0#,0x00                  / empty []byte, "" is a string in ⍳
num:{`c$x}                 / unsigned to LEB128, TODO x>127
add:0x6a                   / i32.add
f:`v!(I;e;e;C,num ver)     / exported function (single letter name)
f[`add]:(I;I,I;e;x,y,add)  / ret;args;locals;body (locals e.g.: I,I,F,F,F)
f[`sub]:(I;I,I;e;x,y,0x6b)
f[`ini]:(I;I,I;e;e)        / start function

/ https://webassembly.github.io/wabt/demo/wat2wasm/
/ https://github.com/sunfishcode/wasm-reference-manual/blob/master/WebAssembly.md

/ emit
o: 0x0061736d01000000         / header

/ 0x01(type section)
o,:0x01 
sig:{0x60,(`c$#x[1]),x[1],(`c$#x[0]),x[0]}
sl:{sig[x]}'f; sl:sl[!sl]    / list of function signatures
ul:?sl
oo:(`c$#ul),,/ul
o,:num[#oo],oo

/ 0x02(import section)
/ 0x03(function section, type declarations)
oo:num[#f],/{num@&ul~'(,#ul)#,x}'sl
o,:0x03,num[#oo],oo

/ 0x04(table section)
/ 0x05(linear memory section)
/ 0x06(global section)
/ 0x07(export section)
ln:{$[iv=1;#`\x;#$x]}         / all strings have length 1 in ⍳: need to split.
str:{$[iv=1;`c$x;$x]}         / symbol to chars (⍳: string to []byte)
ex:(!f)@&{1=ln x}'!f
g:{0x01,(str x),0x00,num[*&x=!f]}
oo:num[#ex],$[iv=1;`c$`/g'ex;,/g'ex]
o,:0x07,num[#oo],oo

/ 0x08(start section)
o,:0x0801,num@*&`ini=!f

/ 0x09(element section)
/ 0x0a(code section)
h:{num[#?x],,/(+/+(x=)'?x),'?x} / array of local declarations I,I,F,F,F→2,2,I,3,F
g:{h[x 2],x[3],0x0b}            / function body: locals, instructions
oo:(num@#f),,/{num[#g x],g x}'f[!f]
o,:0x0a,num[#oo],oo

/ 0x0b(data section)

$[iv=1;print o;o]