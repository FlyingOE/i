# wasi patch
# - remove all imports (Exit,Args,Arg,Read,Write,ReadIn,Native)
# - rewrite getargs() using args_get&args_sizes_get
# - remove store(), catch()
# - add _start()
# - dummy Native()
# - implement Read, Write, ReadIn with fd_read, fd_write, path_open, fd_seek
#
# wavm run --abi=wasi --mount-root . k.was
# wasm3 k.was
# wazero run k.was
# doc: github.com/tetratelabs/wazero/blob/main/imports/wasi_snapshot_preview1

cat << 'EOF'                    >k.wasi
(module
(import "wasi_snapshot_preview1" "args_sizes_get" (func $args_sizes_get (param i32 i32) (result i32)))
(import "wasi_snapshot_preview1" "args_get" (func $args_get(param i32 i32) (result i32)))
(import "wasi_snapshot_preview1" "fd_read"  (func $fd_read  (param i32 i32 i32 i32) (result i32)))
(import "wasi_snapshot_preview1" "fd_write" (func $fd_write (param i32 i32 i32 i32) (result i32)))
(import "wasi_snapshot_preview1" "fd_seek"  (func $fd_seek  (param i32 i64 i32 i32) (result i32)))
(import "wasi_snapshot_preview1" "fd_close" (func $fd_close (param i32) (result i32)))
(import "wasi_snapshot_preview1" "path_open" (func $path_open (param i32 i32 i32 i32 i32 i64 i64 i32 i32) (result i32)))
(import "wasi_snapshot_preview1" "proc_exit" (func $proc_exit (param i32)))
EOF

sed 1,8d ../k.wat | awk 'BEGIN{x=1}/^\(func/{x=1}/^\(func \$(getargv|store|catch)/{x=0}{if(x)print}' | grep -v '^)' >>k.wasi


cat << 'EOF'                  >>k.wasi
(func (export "_start") 
 call $main)
(func $store)
(func $catch)
(func $Exit (param i32)
 local.get 0
 call $proc_exit)
(func $getargv (result i64) (local $i i64) (local $r i64)
 i32.const 512 
 i32.const 516
 call $args_sizes_get
 drop

 i32.const 19
 i32.const 512
 i32.load
 call $mk
 local.tee $i
 i32.wrap_i64

 i32.const 18
 i32.const 516
 i32.load
 call $mk
 local.tee $r
 i32.wrap_i64
 call $args_get
 drop

 local.get $i
 call $dx

 i32.const -1
 i32.const 0
 call $Kc
 local.get $r
 call $split
 call $ndrop)
(func $Read (param i32 i32 i32) (result i32) (local $fd i32) (local $sz i32)
 i32.const 3
 i32.const 0
 local.get 0
 local.get 1
 i32.const 0
 i64.const 6
 i64.const 6
 i32.const 0
 i32.const 512
 call $path_open
 if
  i32.const 0
  return
 end
 i32.const 512
 i32.load
 local.tee $fd

 i64.const 0
 i32.const 2
 i32.const 512
 call $fd_seek
 drop

 i32.const 512
 i64.load
 i32.wrap_i64
 local.set $sz

 local.get 2
 i32.eqz
 if
  local.get $fd
  call $fd_close
  drop
  local.get $sz
  return
 end

 local.get $fd
 i64.const 0
 i32.const 0
 i32.const 512
 call $fd_seek
 drop

 i32.const 512
 local.get 2
 i32.store
 i32.const 516
 local.get $sz
 i32.store

 local.get $fd
 i32.const 512
 i32.const 1
 i32.const 516
 call $fd_read
 if
  i32.const -1
  return
 end
 
 local.get $fd
 call $fd_close
 drop
 
 i32.const 0
 i32.const 0
 local.get 2
 local.get $sz
 call $Write
 drop

 local.get $sz)
(func $Write (param i32 i32 i32 i32) (result i32) (local $fd i32) (local $r i32)
 local.get 1
 i32.eqz
 if (result i32)
  i32.const 1
 else
  i32.const 3
  i32.const 0
  local.get 0
  local.get 1
  i32.const 9
  i64.const 525334
  i64.const 525334
  i32.const 0
  i32.const 512
  call $path_open
  if
   i32.const -1
   return
  end
  i32.const 512
  i32.load
 end
 local.set $fd
 
 i32.const 512
 local.get 2
 i32.store
 i32.const 516
 local.get 3
 i32.store
 
 local.get $fd
 i32.const 512
 i32.const 1
 i32.const 516
 call $fd_write
 local.set $r
 
 local.get 1
 i32.eqz
 if
  local.get $r
  return
 end
 local.get $fd
 call $fd_close
 drop
 local.get $r)
(func $ReadIn (param i32 i32) (result i32) 
 i32.const 512
 local.get 0
 i32.store
 i32.const 516
 local.get 1
 i32.store

 i32.const 0
 i32.const 512
 i32.const 1
 i32.const 516
 call $fd_read
 drop
 i32.const 516
 i32.load)
(func $Native (param i64) (param i64) (result i64)
 i64.const 0)
EOF

echo ")"                      >>k.wasi



wat2wasm -o k.was k.wasi

