k.k (k in k)
----------------------------------------------------------------------------------
monadic
  +(abs)  -(neg)  ~(not)  _(floor)  *(clz)  %(sqrt)

dyadic
  +  -  *  %(div)  %'  !(mod)  !'  &(and)  |(or)  #(xor)  ^(lshift)  _(rshift)

compare
  <  >  </(le)  >/(ge)  ~(equal)

derived
  x'(signed)  x\(float)

memory
  C x     I x     F x      load
  C[x]:y  I[x]:y  F[x]:y   store

convert
  `I$x   `F$x

control
  x?y (if)   $(x;y;z) (cond)    x/(y) (n-loop)   x?/(y) (while)   :x (return)

call
  f x    f[x;y]

call indirect
  T[i][x;y;z]

----------------------------------------------------------------------------------
01234567   xt:x>>29      xt~0(function)  x<256(basic) x<128(dyadic)
Fcifzsld   xn:x&^7<<29   xn~2(derived)   adv  verb
4148x444                 xn~3(proj)      verb argv empty-index             
                         xn~5(lambda)    str  code args  arity src-map
                                              
+  add abx               abs:+z          bytes
-  sub neg                                 0..  7  type sizes   0 1 4 8 16 4 4 0
*  mul fst                                 8.. 11  parse cur (pp)
%  div sqr   con:%i      conj:%z          12.. 15  rng state
&  min wer   prs flp     ang:&z           16..127  free pointers (4*i) for 4..31
|  max rev                               128..131  memsize log2
<  les grd                               132..135  k-tree keys
>  mor gdn                               136..139  k-tree values
=  eql grp                               140..143  trp line
~  mtc not               ~f              144..147  trp col
!  mkd til   seq         z:re!im im:!z   148..151  `x`y`z
,  cat enl                               152..155  
^  exc asc                               156..159  interned const
$  str cst   sc cs                       160..255  char map az|AZ|NM|VB|AD|TE
#  rsh cnt   take                        256.....  buckets/heap
_  drp flr   drop        re:_z f:__i i:_f
?  fnd unq   fnd fnx                     (:;`x;y)          assign      x:y
@  atx typ               z:abs@ang z@ang (+;(`x;a;b;c);y)  assign(m/i) s[a;b;c]+:y
.  cal val               im:. z          (;a;b;c)   (*128) sequence    a;b;c     
                                         ((/;+);1 2 3)     adverbs     +/1 2 3 
+'x  ech(168)  x+'y  ecd(40)             x'y  bin          ::x(last)   `a`b:1 2
+/x  ovr(251)  x+/y  ovi(123)  whl nlp   x/y  mod
+\x  scn(219)  x+\y  sci(91)  (c;f)/:x   x\y  y%x   \(help)  \\(exit)  \d(dump)
+':x ecp(169)  x+':y epi(41)  (c;f)\:x   x':y win?  dropfile(fs[name]) \lm(ld m.k)
+/:x fxp(253)  x+/:y ecl(125) (n;f)/:x   x/:y join  \wFILE(download)   \w(k.ws)
+\:x fxp(221)  x+\:y ecr(93)  (n;f)\:x   x\:y split \c(clear console)  \e var(edt)
----------------------------------------------------------------------------------
