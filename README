⍳ interpret - a k interpreter for Go

Package interface (2 functions, no types):
  l := P("!3")  // Parse expr to ast (list []interface{})
  v := E(l, a)  // Evaluate to value (interface{})
  //k-tree: a map[interface{}]interface{}

Types
    float64,   complex128      numbers
  []float64, []complex128      uniform vectors
  []interface{}                list
  []rune                       character array
  string                       symbol
  map[interface{}]interface{}  dict (`_ is reserved)
  func                         function
Any Go variable that is present in the k-tree can be used as well:
  any slice                    list
  any map or struct            dict (string keys for structs)
  any numeric type             number
  any function can be called
  any type implementing a verb interface can be used:
    monadic: func (t myType) Neg() interface{}
    dyadic:  func (t myType) Add(y interface{}, tLeft bool) interface{}
  called for each scalar, or a single call if t is a slice

Verbs
    a     l     a-a   l-a   a-l   l-l   tri  tet
+   flp   flp  [add] [add] [add] [add]   -    -   ⍉
-  [neg] [neg] [sub] [sub] [sub] [sub]   -    -    
*   fst   fst  [mul] [mul] [mul] [mul]   -    -   ×
%  [inv] [inv] [div] [div] [div] [div]   -    -   ÷
!   til   odo   mod    -    mod>  mkd    -    -   ⍳
&   wer   wer  [min] [min] [min] [min]   -    -   ⍸⌊
|   rev   rev  [max] [max] [max] [max]   -    -   ⌽⌈
<   asc   asc  [les] [les] [les] [les]   -    -   ⍋
>   dsc   dsc  [mor] [mor] [mor] [mor]   -    -   ⍒
=   dia   grp  [eql] [eql] [eql] [eql]   -    -   ⌸
~  [not] [not]  mch   mch   mch   mch    -    -   ≡
,   enl   enl   cat   cat   cat   cat    -    -   
^   is0  [is0]  ept   ept   ept   ept    -    -   ∧
#   cnt   cnt   tak   rsh   tak   rsh    -    -   ⍴≢↑ 
_  [flr] [flr]  drp   fil   drp   cut    -    -   ⌊↓
$   fmt  [fmt]  cst   cst   cst   cst    -    -   ⍕⌶
?   rng   unq   rnd   fnd   pik   fnd>  spl   -   ∪
@   typ   typ   atx   atx   atx   atx   amd  amd  
.   evl   evl   cal   cal   cal   cal   dmd  dmd  ⍎
'    -     -     -    bin    -    bin>   -    -     
/    -     -     -     -    pak   pak    -    -     
\    -     -     -    upk   spl   -      -    -     
':   -     -     -     -    win   -      -    -    
                                                  
Adverbs                                  :← x⍺ y⍵ o∇
    mv/nv dv    l-mv  l-dv  3+v          pow⍣ abs¯ reℜ imℑ
':   -    ecp    -    ecp    -       ⍨   piπ  nanø sqr√ log⍟
'   ech   ecd   ecd   ecd   eca      ¨
/:   -     -    ecr   ecr    -       ⌿
\:   -     -    ecl   ecl    -       ⍀
/   fxd   ovr   fxw   ovd   ova       
\   scf   scn   scw   scd   sca         

Ref
  github.com/JohnEarnest/ok

Status nyi
  This is a slow version of k. It does no ref-counting, copies everything
  and is based on type reflection. It's focus is direct integration into
  the go type system, to be usable by existing programs with minimal glue.
  