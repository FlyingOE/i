⍳ interpret - a k interpreter for Go

Package interface (2 functions, no types):
  l := P("!3")  // Parse expr to ast (list []interface{})
  v := E(l, a)  // Evaluate to value (interface{})
  //k-tree: a map[interface{}]interface{}

Types
    complex128        numbers    1 -2.3 5e6 1i0 3a270
  []complex128        uniform vectors       1 2.3 -55
  []interface{}       list      (1;2;3;2`b;"x";(4;5))
  string              symbol/chars "x\nz" `a`str`list
  [2][]interface{}    dict                  [a:1;b:2]
  func                function            {x+y}  ⍟  +
Any Go var present in the k-tree can be used as well:
  any slice           list                 []mytype{}
  any map or struct   dict  (string keys for structs)
  any numeric type    number        type myint uint16
  any function can be called                 func(){}
  get methods with @  f:mytype@`m;f[3] or mytype`m[3]

    a     l     a-a   l-a   a-l   l-l 
+   flp   flp  [add] [add] [add] [add]  ⍉
-  [neg] [neg] [sub] [sub] [sub] [sub]   
*   fst   fst  [mul] [mul] [mul] [mul]  ×
%  [inv] [inv] [div] [div] [div] [div]  ÷
!   til   odo   mod    -    mod>  mkd   ⍳
&   wer   wer  [min] [min] [min] [min]  ⌊
|   rev   rev  [max] [max] [max] [max]  ⌽⌈
<   asc   asc  [les] [les] [les] [les]  ⍋
>   dsc   dsc  [mor] [mor] [mor] [mor]  ⍒
=   eye   grp  [eql] [eql] [eql] [eql]  
~  [not] [not]  mch   mch   mch   mch   ≡
,   enl   enl   cat   cat   cat   cat   
^   is0  [is0]  ept   ept   ept   ept   
#   cnt   cnt   tak   rsh   tak   rsh   ⍴↑ 
_  [flr] [flr]  drp   drp   drp   cut   ⌊↓
$   fmt  [fmt]  cst   cst   cst   cst   
?   rng   unq   rnd   fnd   rnd   fnd>  
@   typ   typ   atx   atx   atx   atx   
.   evl   evl   cal   cal   cal   cal   
/    -     -     -     -    pak   pak     
\    -     -     -    upk   spl   -      
                                                                     
    mv/nv dv    l-mv  l-dv        
'   ech   ecd   ecd   ecd   ¨     
':   -    ecp    -    eci   ⍨     inf∞ nanø piπ
/:   -     -    ecr   ecr   ⌿     sqr√ log⍟ pow,exp⍣
\:   -     -    ecl   ecl   ⍀     sin  cos  tan
/   fidx  ovr   whl   ovi         abs‖ ang𝜑 deg°
\   sfx   scn   swl   sci         reℜ  imℑ  con

   +m  ⍉ flip, transpose    /  ⍉3 2⍴⍳6           → (0 2 4;1 3 5)
   -x  negate               / -(1;2;(3;(4;5)))   → (-1;-2;(-3;(-4 -5)))
   *l  first                / *2 3 4             → 2
   *d  first                / *[a:1;b:2]         → 1
con[x] conjugate complex    / con 1i3            → 1i-3
   √x  sqrt[x] square root  / √- 4 9             → 0i-2 0i-3
   %x  ÷ inverse            / %2 5               → 0.5 0.2
   ‖x  abs[x] magnitue      / ‖3.2a30            → 3.2
   𝜑x  rad[x] phase         / 𝜑-1                → π
   °x  deg[x] angle         / °1i1               → 45
   ℜx  re[x] real part      / ℜ1a90              → 0
   ℑx  im[x] imag part      / ℑ1a90              → 1
   !n  ⍳ til, iota          / ⍳3                 → 0 1 2
   !d  keys                 / ![a:1;b:2]         → (`a;`b)
   !l  ⍳ odometer           / ⍳3 2               → (0 0 1 1 2 2;0 1 0 1 0 1)
   &l  where, repeat        / &3 0 4             → 0 0 0 2 2 2 2
   |x  ⌽ reverse            / ⌽1 2 3             → 3 2 1
   |d  ⌽ reverse            / ⌽[a:1;b:2]         → [b:2;a:1]
   <x  ⍋ grade up           / ⍋8 2 9 1           → 3 1 0 2
   >x  ⍒ grade down         / ⍒`alpha`beta       → 1 0
   =n  unit matrix          / =3                 → (1 0 0;0 1 0;0 0 1)
   =l  group                / =(3;"a";5;3;"a";3) → (3;"a";5)!(0 3 5;1 4;,2)
   ~x  not                  / ~3 2 -1 0          → 0 0 0 1
   ,x  enlist               / ,1                 → ,1
   ^x  isnil isnan          / ^(0%0;0;ø)         → 1 0 1
   ⍣x  exp[x] exponential   / 𝜀>‖1+⍣0i1*π        → 1
   ⍟x  log[x] logarithm     / ⍟⍣1                → 1
   #x  ⍴ count, length      / ⍴2 3⍴⍳6            → 2
   _x  ⌊ floor              / ⌊1.23              → 1
   ⌈x  ceil                 / ⌈1.23              → 2
   $x  format, tostring     / $(1;2;3)           → "(1;2;3)"
   ?n  random uniform       / +/1>?1000          → 1000
   ?-n random normal        / 900 > +/1>?-1000   → 1
   ?i  random binormal      / (+/‖?0i1000)<1300  → 1 / √π÷2
   ?s  parse                / ?"1+2"             → ("+";1;2)
   ?x  unique               / ?2 3 3 0 4 0       → 2 3 0 4
   @x  type of              / (@5)≡@-1.2i5       → 1
   .s  parse and eval       / ."1+2"             → 3
   .l  evaluate             / .(+;1;2)           → 3
  x+y  add                  / 1+2 3 4            → 3 4 5
  x-y  substract            / 2 3 4-1            → 1 2 3
  x*y  × multiply           / 2 0i1 1a270*0i1    → 0i2 -1 1
  x%x  ÷ divide             / 1÷2                → 0.5
  x!y  modulo               / 2!5                → 1
  x!l  modulo               / 2!!10              → 0 1 0 1 0 1 0 1 0 1
 xl!l  make dictionary      / `a`b`c!(10;2 3;`f) → [a:10;b:2 3;c:`f]
  x&y  ⌊ min                / 1 2 3 4&4 3 2 1    → 1 2 2 1
  x|y  ⌈ max                / 1 2 3 4|4 3 2 1    → 4 3 3 4
  x<y  less than            / 5<8 1 5            → 1 0 0
  x>y  more than            / 5>8 1 5            → 0 1 0
  x=y  equals               / 1 ø ∞=(1a0;0%0;1%0)→ 1 1 1
  x‖y  rct parts to complex / 2‖!4               → 2 2i1 2i2 2i3
  x°y  pol polar to complex / 1 2 3°0 90 180     → 1 0i2 -3
  x𝜑y  prd polar to complex / 1𝜑0 π -π           → 1 -1 -1
  x⍣y  power                / 2⍣3                → 8
  x√y  nrt[x;y] nth root    / 𝜀>‖2-3√8           → 1
  x⍟y  lgn[x;y] base n log  / 𝜀>‖3-10⍟1000       → 1
  x~y  ≡ match, deep equal  / 1a90 2.0 3≡0i1 2 3 → 1
  x,y  catentate            / (1;2),3            → (1;2;3)
  x^y  except               / (!10)^!7           → 7 8 9
  a#d  ↑ take               / 2↑[a:1;b:2;c:3]    → [a:1;b:2]
  a#l  ↑ take               / -2↑⍳10             → 8 9
  l#d  ⍴ select             / `a`c#[a:1;b:2;c:3] → [a:1;c:3]
  l#y  ⍴ reshape            / 2 3⍴⍳6             → (0 1 2;3 4 5)
  x_d  ↓ delete             / `a`b_[a:1;b:2;c:3] → [c:3]
  x_y  ↓ drop               / (1_1 2;-1_!3;5_,1) → (,2;0 1;0#,0)
 xl_yl cut                  / 3 5_!8             → (3 4;5 6 7)
  x$y  convert to typeof    / (int@8)$128        → (int@8)$-128
  d$y  format               / [t:1]$[a:,1;b:,3]  → "a b\n---\n1 3"
  n?m  roll                 / 100>#?100?100      → 1
 -n?m  deal                 / #?-10?10           → 10
  n?l  random select        / 100>#?100?!100     → 1
 -n?l  deal shuffled        / #?-100?!100        → 100
 xl?y  find                 / 3 5?⍳7             → 2 2 2 0 2 1 2
  l@y  at, index            / 2 5 6@0 2          → 2 6
  d@y  at, index            / [a:1;b:2;c:3]@`a`c → 1 3
  f@y  monadic call         / {-x}@2 3           → -2 -3
  l.y  depth list index     / (1;(2;(3;4))).1 1 0→ 3
  d.y  depth dict index     / [a:1;b:[c:2]].`b`c → 2
  x.m  method               / (myf`F0)[]+0       → 2
  x.y  call                 / {x+y}.(3;4 5)      → 7 8
  x.y  curry                / ({x+y+z}.(1;;3)) 2 → 6
  s/y  join                 / ";"/`alpha`beta    → "alpha;beta"
  s\y  split                / ";"\"a;b;;c;d"     → `a`b``c`d
  f'x  ¨ each               / -:¨1 2             → -1 -2
x g'y  ¨ each pair          / 2 3*¨4 5           → 8 15
  g':x ⍨ each prior         / -⍨1 5 3            → 1 4 -2
x g':y ⍨ each prior initial / 7-⍨1 5 3           → -6 4 -2
x g/:y ⌿ each right         / 1 2+⌿3 4 5         → (4 5;5 6;6 7)
x g\:  ⍀ each left          / 1 2+⍀3 4 5         → (4 5 6;5 6 7)
  g/y  over, reduce         / +/1 2 3            → 6
  g\y  scan                 / +\1 2 3            → 1 3 6
x g/y  over initial         / 5+/1 2 3           → 11
x g\y  scan initial         / 5+\1 2 3           → 6 8 11
n f/y  for, repeat          / 3 (2⍣)/2           → 65536
t f/y  while                / {x<100}{x*2}/1     → 128
x f\y  scan for             / 2 √:\81            → 81 9 3
t f\y  scan while           / {x<100}(2*)\1      → 1 2 4 8 16 32 64 128
  f/y  fixed point          / √:/2               → 1
  f\y  scan fixed           / -:\3               → 3 -3
 πø∞𝜀  numeric constants    / (π;ø;∞;𝜀)=π ø ∞ 𝜀  → 1 1 1 1
   $[x;z;y;…] if, switch    / $[1>2;∞;𝜀]         → 1e-14
  x∇y  tail call            / {$[x>100;x;∇x+1]}1 → 101
