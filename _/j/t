
(-arithmetics)
(basic arithmetics is defined on integers)
1 2+        (3)
1 2-        (-1)
2 3*        (6)
6 2/        (3)
6 4/        (1)     (integer division)
6 4%        (2)     (modulo)
01-         (-1)    (negative numbers)

(comparison)
3 3=        (1)
1 2<        (1)
1 2>        (0)
01-0<       (1)

(-stack-operators)
1 2~        (2 1)   (swap/exchange)
1"          (1 1)   (duplicate)
1 2_        (1)     (pop/drop)
1 2 3|      (3 1 2) (roll)
[1+]"__     ()

(-catenate)
(catenate, append, cons, enlist)
1 2,            ([1 2])         (make a list from two atoms)
1[2],           ([1 2])         (x gets enlisted if atom)
[1 2]3,         ([1 2 3])       (append atom y to list x)
[1][2 3],       ([1 2 3])       (two lists are merged)
[][1 2],        ([1 2])         (this does not enlist)

(set list index)
[1 2 3]0 5$     ([5 2 3])       (set list at index 0 to 5)
[1 2 3]3 5$     ([1 2 3 5])     (amend to # appends)
[1 3 2]#        (3)             (count/length)

(enlist and cat)
[[]~0~$][enlist]:    ()
[1 2]enlist          ([[1 2]])
[enlist,][cat]:      ()
[1 2][3 4]cat        ([1 2 [3 4]])   (cat appends y as a single element)

(-branch)
1[2 3+][4 5+]?            (5) (? expects an integer as a boolean)
0[2 3+][4 5+]?            (9)
[}}.{{?][ifte]:           ()  (ifte is similar but expects a quotation)
1 1[=][2][3]ifte          (2)
1 5[=][2][3]ifte          (3)

(if)
[[]?][if]:                ()  (if has no then clause)
2 1[2+]if                 (4)
2 0[3*]if                 (2)
[}.{[]?][iff]:            ()  (iff expects a quotation)
2 1 1[<][2+]iff           (2)
2 1 2[<][3*]iff           (6)

(-loop)
(while)
[}"}.{{"|}cat{cat[while],[]?][while]:  () ([C][D]while "while C do D)
5["][1-]while                          (0)
[}"1-}{{"|}cat{cat[times],[]?][times]: () (n[P]times do P n times)
1 4[2*]times                           (16)

(-recursion)
(tail recursion: exec P. if true, exec T, else exec R recurse)
[}}"}.{{"|{"}|}cat{cat{cat[tailrc],?][tailrc]: ()  ([P][T][R]tailrc)
1["5=][10*][1+]tailrc                          (50)

(-array)
[[]~["][1-"},{]while_][ntil]:   () (til n downwards)
5 ntil                          ([4 3 2 1 0])
[}[]["#]{,[<],["#,]while][til]: ()  (n til)
5 til                           ([0 1 2 3 4])
[0@][first]:                    ()
[1 2 3]first                    (1)
["#1-@][last]:                  ()
[1 2 3]last                     (3)

(-each)
(each/map: apply f to each element of A)
["}#~"}#<{{||][balt]:                                 () (a b -- a b ba<)
[balt["|#~"|~@|}|~"}.~"#||${~{~eachs][|__]?][eachs]:  ()
[~[]eachs][each]:                                     () ([A][f]each)
[1 2 3][0~-]each                                      ([-1 -2 -3])

(dyadic each)
[balt["}#~"}~"|@|~"}~@|~"}.{~{~{~{"#||$eachds][}___{]?][eachds]:  ()
[|[]eachds][eachd]:                                               () ([A][B][f]eachd)
[3 2 1][4 5 6][-]eachd                                            ([-1 -3 -5])

(each right)
[balt["}#~"}~@~"}~||"}.{~{~{~{~,eachrs][}___{]?][eachrs]: ()
[|[]eachrs][eachr]:                                       () (A[B][f]eachr)
1[1 2 3][+]eachr                                          ([2 3 4])

(each left)
[[~]~,|~[]eachrs][eachl]:  ()
[1 2 3]1[-]eachl           ([0 1 2])

(-extend)
(atomic extension, vectorize)
[}"#0<2*} ~"#0<}~ {{+ [[eachd] [eachr] [eachl] [.]]~@{~.][atomx]: () ([f]atomx)
[[+]atomx][add]:                                                  ()
[[-]atomx][sub]:                                                  ()
[[*]atomx][mul]:                                                  ()
[[/]atomx][div]:                                                  ()
[[<]atomx][lt]:                                                   ()
[[>]atomx][gt]:                                                   ()
[[=]atomx][eq]:                                                   ()
[[=0=]atomx][neq]:                                                ()
[0eq][not]:                                                       ()
1[2 3 4]add                                                       ([3 4 5])

\

[}"#0<2*} ~"#0<}~ {{+ [[eachd] [eachr] [eachl] [.]]~@{~!.][atomx]:[[+]atomx][add]:1[2 3 4]add


1[2 3 4]add ([3 4 5])

aB[+]
AB 	2bn [+]
aB 	an 2bn [+]
aB an2bn+	[+]
aB p [each eachl eachr .]~@{

\
x y	"#0<2*}
x y 	~"#0<}~	2ny
x y nx	{{+

[}][eachd]:                   () ([a][b][f]eachd)
[}"#til[{"}@eachd{_]][each]: () ([a][f]each) 
[1 2 3][0-]each                 ([-1 -2 -3])

0                               (0)
01-                             (-1)
[0@]            [first ]:       ()
["#1-@]         [last  ]:       ()
[[]~,]          [enlist]:       ()
["*]            [square]:       ()
[~;;.0=1+}]     [ifte  ]:       ()
[[1_]ifte]      [if    ]:       ()
[~"|~"|]        [dups  ]:       ()


