(module
 (type (func (param i32 i32) (result i32)))
 (type (func (param f64 f64) (result f64)))
 (type (func (param i32 i32) (result f64)))
 (func $jmp (param $pc i32) 
  (local $i  i32) (local $op i32) (local $rd i32) (local $r1 i32) (local $r2 i32) 
  (local $f3 i32) (local $f7 i32) (local $x  i32) (local $y  i32) (local $z  i32) (local $im i32)
  (local.set $i (local.get $pc))
  
  (local.set $op (i32.and (local.get $i) (i32.const 127)))
  (local.set $rd (i32.and (i32.shr_u (local.get $i) (i32.const  7)) (i32.const  31)))
  (local.set $r1 (i32.and (i32.shr_u (local.get $i) (i32.const 15)) (i32.const  31)))
  (local.set $r2 (i32.and (i32.shr_u (local.get $i) (i32.const 20)) (i32.const  31)))
  (local.set $f3 (i32.and (i32.shr_u (local.get $i) (i32.const 12)) (i32.const   7)))
  (local.set $f7 (i32.and (i32.shr_u (local.get $i) (i32.const 25)) (i32.const 127)))
  (local.set $im (i32.shr_s (local.get $i) (i32.const 20)))
  
  (select (i32.store (local.get $rd) (call_indirect (type 0) (local.get $f3) (local.get $r1) (local.get $im)))
  (select (f64.store offset=128 (local.get $rd) (call $fld (local.get $r1) (local.get $im)))
  (select (i32.store (local.get $rd) (call_indirect (type 0) (i32.add (local.get $f3) (i32.const 8)) (local.get $r1) (local.get $r2)))
  (unreachable)
  (i32.eq (local.get $op) (i32.const 19)))
  (i32.eq (local.get $op) (i32.const 7)))
  (i32.eq (local.get $op) (i32.const 3)))
  drop
  (local.set $pc (i32.add (local.get $pc) (i32.const 4)))
 )
 (func $xxx  (type 0) unreachable)
 (func $lb   (type 0) (i32.load8_s (i32.add (local.get 0) (local.get 1))))
 (func $lw   (type 0) (i32.load    (i32.add (local.get 0) (local.get 1))))
 (func $lbu  (type 0) (i32.load8_u (i32.add (local.get 0) (local.get 1))))
 (func $add  (type 0) (i32.add   (local.get 0) (local.get 1)))
 (func $fadd (type 1) (f64.add   (local.get 0) (local.get 1)))
 (func $shl  (type 0) (i32.shl   (local.get 0) (local.get 1)))
 (func $shr  (type 0) (i32.shr_u (local.get 0) (local.get 1)))
 (func $shrs (type 0) (i32.shr_s (local.get 0) (local.get 1)))
 (func $xor  (type 0) (i32.xor   (local.get 0) (local.get 1)))
 (func $or   (type 0) (i32.or    (local.get 0) (local.get 1)))
 (func $and  (type 0) (i32.and   (local.get 0) (local.get 1)))
 (func $fld  (type 2) (f64.load offset=128 (i32.add (local.get 0) (local.get 1))))
 (memory 1) (export "mem" (memory 0))
 (table 8 funcref)
 (export "jmp" (func 0))
 (elem (i32.const 0) func $lb   $xxx  $lw  $xxx $lbu  $xxx  $xxx $xxx
                          $add  $shl  $xxx $xxx $xor  $shr  $or  $and)
)
