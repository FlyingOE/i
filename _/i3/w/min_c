// minimal embedding example (execute argv[1], 64k)
// $ w -c ../../k.w > k_h
// $ tcc min_c -o min.exe #linux: -lm
// $ ./min.exe '*|!10' ; echo $?

#include<stddef.h>
#include<math.h>

#define R return
typedef void V;typedef unsigned char C;typedef uint32_t I;typedef uint64_t J;typedef double F;typedef int32_t SI;typedef int64_t SJ;
I __builtin_clz(I x){I r;__asm__("bsr %1, %0" : "=r" (r) : "rm" (x) : "cc");R r^31;}
C M[1<<16];C *MC;I* MI;J* MJ;F *MF;
V sC(I x,C y){MC[x]=y;}V sI(I x,I y){MI[x>>2]=y;}V sF(I x,F y){MF[x>>3]=y;}V sJ(I x,J y){MJ[x>>3]=y;};

V panic(){}
I grow(I x){}
V printc(I x, I y){}
V draw(I x, I y, I z){}

#undef abs
#undef min
#undef max

#include"k_h"

I main(int args, C **argv){
	MC=M; MI=(I*)M; MJ=(J*)M; MF=(F*)M;
	for (I i=0;i<1<<(16-2);i++)MI[i]=0;

	mt_init();    //set function pointers
	ini(16);      //init k memory system

	C *a=argv[1];
	I n=0;for(I i=0;a[i];i++)n++;
	I x=mk(1,n);for(I i=0;i<n;i++)MC[x+8+i]=a[i];

	x=val(x);     //evaluate (assume int result)
	return MI[2+(x>>2)];
}
