# webassembly compiler(draft)
# 
# write wasm by hand, but more compact than wat
# 
# the input file compiles to a wasm module.
# it contains a collection of functions.
#
# add:I:II{x+y}
# sum:I:I {x/r:+i;r}
#
# types are I(i32) J(i64) F(f64)
# no preference    apl style x*a+b, but lhs is evaluted first: x a b + *
# sequence a;b;c   c(last) returns a typed value all others must return null
# loop     x/y     execute y x times    x evaluates to I, y must be null
#                  loops have implicit locals with names i(j,k... if nested) type I
# arguments        x,y,z,x3,x4,.. are typed in the function declaration f:R:XYZ..
# locals           are detected at evaluation order (type is derived) r:x+y
#                  x+a:x+y  a:assigns and returns (tee_local), not within a sequence (a:x+y;..)
# 
# see ops for all wasm opcodes and their w operators
# todo: memory

# install go-1.13
set -xe
if [ "$1" = "clean" ]; then rm a.wasm a.html a.go k.h k.exe; exit; fi

go run w.go        < a.w > a.wasm    # wasm binary
go run w.go -html  < a.w > a.html    # embed wasm in html
# open file://.../index.html in a browser, in js console: k.add(1,2)

# transpile to go or c
go run w.go -gout  < a.w > a.go      # write go source
go run w.go -cout  < a.w > k.h       # write c source
/c/local/tcc/tcc  -o k.exe k_c

# install wabt (webassembly binary toolkit github.com/WebAssembly/wabt)
wabt=/c/local/wabt
$wabt/wasm-validate  a.wasm

# interactive: webassembly.github.io/wabt/demo/wat2wasm
# wasi: github.com/bytecodealliance/wasmtime/blob/master/docs/WASI-tutorial.md#web-assembly-text-example

ls -ln a.w a.wasm k.exe w.go 
