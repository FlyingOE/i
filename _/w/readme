# webassembly compiler
# 
# write wasm by hand, but more compact than wat
# 
# the input file compiles to a wasm module.
# it contains a collection of functions.
#
# add:I:II{x+y}        /exported function
# sum.I:I {x/x+:i;x}   /private function
# mac:    {a:3;b:5}    /flat macro
# 0:      {add;sum}    /function table
# sin:F:F {}           /imported function (from module "ext")
# 256!{010203ff}       /data section
#
# types are I(i32) F(f64)
# no preference    apl style x*a+b, but lhs is evaluted first: x a b + *
# arguments        x,y,z,x3,x4,.. are typed in the function declaration f:R:XYZ..
# locals           are detected at evaluation order (type is derived) r:x+y
# memory/heap      C x;I x;F x (get from addr x)  x::y (write y to addr x), also x::C?y
# a;b;c            sequence. c(last) returns a typed value all others must return null
# x?y              if x then y
# $[a;b;c;d;e]     if a then b elseif c then d else e
# x/y              n-loop execute-y x-times (x evaluates to I, y must be null)
#                  creates implicit local i, and n if x is an expression. no nesting.
# x?/y             while x do y (y must have not type)
# C?x I?x F?x I?'x type conversions ?'(signed)
# sum x ; x add y  named function call, dyad(infix), names can be defined later
# 8:{f;g;h}        add f,g,h to function table starting at offset 8
# (I.x+1)(a;b)     call indirect: return type I, function index x+1, args a b
# 
# see ops for all wasm opcodes and their w operators

# install go-1.13
go build w.go
./w < ../../k.w > k.wasm    # wasm binary

# or transpile to c or go (no wasm involved):
./w -c  < in.w > src.c
./w -go < in.w > src.go

# example: generate k_h and test it
go test
./runcc t

# build online interpreter k.html
go test            
#browse to file:///.../k.html

online at ktye.github.io

# a complete wasm module (11 bytes input / 50 bytes output):
$ echo "f:I:II{x+y}" | w | xxd
0000000: 0061 736d 0100 0000 0107 0160 027f 7f01  .asm.......`....
0000010: 7f03 0201 0005 0301 0001 070b 0203 6d65  ..............me
0000020: 6d02 0001 6600 000a 0901 0700 2000 2001  m...f....... . .
0000030: 6a0b                          ^^^^ ^^^^  j.
         ^^add(i32)                    locX locY
	 
