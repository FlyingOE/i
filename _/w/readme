# webassembly compiler(draft)
# 
# write wasm by hand, but more compact than wat
# 
# the input file compiles to a wasm module.
# it contains a collection of functions.
#
# add:I:II{x+y}                  /exported function
# sum.I:I {x/r:+i;r}             /private function
# mac:    {a:3;b:5}              /flat macro
# negT:   {10/(x+W*i)::-T x+W*i} /type generic macro
# negC:   {10/(x+4*i)::-I x+4*i} /negC negI negJ negF (expanded by negT)
#
# types are I(i32) J(i64) F(f64)
# no preference    apl style x*a+b, but lhs is evaluted first: x a b + *
# arguments        x,y,z,x3,x4,.. are typed in the function declaration f:R:XYZ..
# locals           are detected at evaluation order (type is derived) r:x+y
# memory/heap      C x;I x;J x;F x (get from addr x)  x::y (set addr x to y)
# a;b;c            sequence c(last) returns a typed value all others must return null
# x?y              if x then y
# $[a;b;c;d;e]     if a then b elseif c then d else e
# x?[a;b;c;d]      jump to statement x (must be I) default d (last), no return values
# x/y              execute y x times (x evaluates to I, y must be null)
#                  n-loops have implicit locals with names i(j,k... if nested) type I
# x?/y             while x do y (y must be null)
# I?x F?x I?'x     type conversions ?'(signed)
# sum x ; x add y  named function call, dyad(infix), names can be defined later
# 8:{f;g;h}        add f,g,h to function table starting at offset 8
# (I.x+1)(a;b)     call indirect: return type I, function index x+1, args a b
# 
# see ops for all wasm opcodes and their w operators

# install go-1.13
set -xe
if [ "$1" = "clean" ]; then rm a.wasm a.html a.go k.h k.exe; exit; fi

go run w.go        < a.w > a.wasm    # wasm binary
go run w.go -html  < a.w > a.html    # embed wasm in html
# open file://.../index.html in a browser, in js console: k.add(1,2)

# transpile to go or c
go run w.go -go    < a.w > a.go      # write go source
go run w.go -c     < a.w > k.h       # write c source
/c/local/tcc/tcc  -o k.exe k_c

# install wabt (webassembly binary toolkit github.com/WebAssembly/wabt)
wabt=/c/local/wabt
$wabt/wasm-validate  a.wasm

# interactive: webassembly.github.io/wabt/demo/wat2wasm
# wasi: github.com/bytecodealliance/wasmtime/blob/master/docs/WASI-tutorial.md#web-assembly-text-example
# memory: rsms.me/wasm-intro

ls -ln a.w a.wasm k.exe w.go 
