WASM  W    INSTRUCTION          TYPE
0x00  E    unreachable          [t∗1]→[t∗2]
0x01  ---  nop                  []→[]
0x02  ???  block [t?]           []→[t∗]
0x03  L    loop [t?]            []→[t∗]
0x04  $(   if [t?]              []→[t∗]
0x05  ;    else                    
0x0B  )    end                  
0x0C  B    br l                 [t∗1 t?]→[t∗2]
0x0D  B?   br_if l              [t? i32]→[t?]
0x0E  ???  br_table l∗ l        [t∗1 t? i32]→[t∗2]
0x0F  R    return               [t∗1 t?]→[t∗2]
0x10  x    call x               [t∗1]→[t∗2]
0x11  ???  call_indirect x      [t∗1 i32]→[t∗2]  
0x1A  ???  drop                 [t]→[]
0x1B  ???  select               [t t i32]→[t]
0x20  x    get_local x          []→[t]
0x21  x:.; set_local x          [t]→[]
0x22  x:   tee_local x          [t]→[t]
0x23  x    get_global x         []→[t]
0x24  x::  set_global x         [t]→[]   
0x28  I x  i32.load memarg      [i32]→[i32]
0x29  J x  i64.load memarg      [i32]→[i64]
0x2A  ---  f32.load memarg      [i32]→[f32]
0x2B  F x  f64.load memarg      [i32]→[f64]
0x2C  ---  i32.load8_s memarg   [i32]→[i32]     /offset?
0x2D  C x  i32.load8_u memarg   [i32]→[i32]
0x2E  ---  i32.load16_s memarg  [i32]→[i32]
0x2F  ---  i32.load16_u memarg  [i32]→[i32]
0x30  ---  i64.load8_s memarg   [i32]→[i64]
0x31  ---  i64.load8_u memarg   [i32]→[i64]
0x32  ---  i64.load16_s memarg  [i32]→[i64]
0x33  ---  i64.load16_u memarg  [i32]→[i64]
0x34  ---  i64.load32_s memarg  [i32]→[i64]
0x35  ---  i64.load32_u memarg  [i32]→[i64]
0x36  x::  i32.store memarg     [i32 i32]→[]
0x37  x::  i64.store memarg     [i32 i64]→[]
0x38  ---  f32.store memarg     [i32 f32]→[]
0x39  x::  f64.store memarg     [i32 f64]→[]
0x3A  x::' i32.store8 memarg    [i32 i32]→[]
0x3B  ---  i32.store16 memarg   [i32 i32]→[]
0x3C  ---  i64.store8 memarg    [i32 i64]→[]
0x3D  ---  i64.store16 memarg   [i32 i64]→[]
0x3E  ---  i64.store32 memarg   [i32 i64]→[]
0x3F  ???  current_memory       []→[i32]
0x40  ???  grow_memory          [i32]→[i32]
0x41  ---  i32.const i32        []→[i32]
0x42  I    i64.const i64        []→[i64]
0x43  ---  f32.const f32        []→[f32]
0x44  F    f64.const f64        []→[f64]
0x45  ~    i32.eqz              [i32]→[i32]
0x46  ~    i32.eq               [i32 i32]→[i32]
0x47  !    i32.ne               [i32 i32]→[i32]
0x48  <'   i32.lt_s             [i32 i32]→[i32]  / ' signed adverb where needed
0x49  <    i32.lt_u             [i32 i32]→[i32]
0x4A  >'   i32.gt_s             [i32 i32]→[i32]
0x4B  >    i32.gt_u             [i32 i32]→[i32]
0x4C  <='  i32.le_s             [i32 i32]→[i32]
0x4D  <=   i32.le_u             [i32 i32]→[i32]
0x4E  >='  i32.ge_s             [i32 i32]→[i32]
0x4F  >=   i32.ge_u             [i32 i32]→[i32]
0x50  ~    i64.eqz              [i64]→[i32]
0x51  ~    i64.eq               [i64 i64]→[i32]
0x52  !    i64.ne               [i64 i64]→[i32]
0x53  <'   i64.lt_s             [i64 i64]→[i32]
0x54  <    i64.lt_u             [i64 i64]→[i32]
0x55  >'   i64.gt_s             [i64 i64]→[i32]
0x56  >    i64.gt_u             [i64 i64]→[i32]
0x57  <='  i64.le_s             [i64 i64]→[i32]
0x58  <=   i64.le_u             [i64 i64]→[i32]
0x59  >='  i64.ge_s             [i64 i64]→[i32]
0x5A  >=   i64.ge_u             [i64 i64]→[i32]
0x5B  ---  f32.eq               [f32 f32]→[i32]
0x5C  ---  f32.ne               [f32 f32]→[i32]
0x5D  ---  f32.lt               [f32 f32]→[i32]
0x5E  ---  f32.gt               [f32 f32]→[i32]
0x5F  ---  f32.le               [f32 f32]→[i32]
0x60  ---  f32.ge               [f32 f32]→[i32]
0x61  ~    f64.eq               [f64 f64]→[i32]
0x62  !    f64.ne               [f64 f64]→[i32]
0x63  <    f64.lt               [f64 f64]→[i32]
0x64  >    f64.gt               [f64 f64]→[i32]
0x65  <=   f64.le               [f64 f64]→[i32]
0x66  >=   f64.ge               [f64 f64]→[i32]
0x67  *    i32.clz              [i32]→[i32]
0x68  +    i32.ctz              [i32]→[i32]
0x69  ---  i32.popcnt           [i32]→[i32]
0x6A  +    i32.add              [i32 i32]→[i32]
0x6B  -    i32.sub              [i32 i32]→[i32]
0x6C  *    i32.mul              [i32 i32]→[i32]
0x6D  %'   i32.div_s            [i32 i32]→[i32]
0x6E  %    i32.div_u            [i32 i32]→[i32]
0x6F  \'   i32.rem_s            [i32 i32]→[i32]
0x70  \    i32.rem_u            [i32 i32]→[i32]
0x71  &    i32.and              [i32 i32]→[i32]
0x72  |    i32.or               [i32 i32]→[i32]
0x73  ^    i32.xor              [i32 i32]→[i32]
0x74  <<   i32.shl              [i32 i32]→[i32]
0x75  >>'  i32.shr_s            [i32 i32]→[i32]
0x76  >>   i32.shr_u            [i32 i32]→[i32]
0x77  ---  i32.rotl             [i32 i32]→[i32]
0x78  ---  i32.rotr             [i32 i32]→[i32]
0x79  *    i64.clz              [i64]→[i64]
0x7A  |    i64.ctz              [i64]→[i64]
0x7B  ???  i64.popcnt           [i64]→[i64]
0x7C  +    i64.add              [i64 i64]→[i64]
0x7D  -    i64.sub              [i64 i64]→[i64]
0x7E  *    i64.mul              [i64 i64]→[i64]
0x7F  %'   i64.div_s            [i64 i64]→[i64]
0x80  %    i64.div_u            [i64 i64]→[i64]
0x81  \'   i64.rem_s            [i64 i64]→[i64]
0x82  \    i64.rem_u            [i64 i64]→[i64]
0x83  &    i64.and              [i64 i64]→[i64]
0x84  |    i64.or               [i64 i64]→[i64]
0x85  ^    i64.xor              [i64 i64]→[i64]
0x86  <<   i64.shl              [i64 i64]→[i64]
0x87  >>'  i64.shr_s            [i64 i64]→[i64]
0x88  >>   i64.shr_u            [i64 i64]→[i64]
0x89  ???  i64.rotl             [i64 i64]→[i64]
0x8A  ???  i64.rotr             [i64 i64]→[i64]
0x8B  ---  f32.abs              [f32]→[f32]
0x8C  ---  f32.neg              [f32]→[f32]
0x8D  ---  f32.ceil             [f32]→[f32]
0x8E  ---  f32.floor            [f32]→[f32]
0x8F  ---  f32.trunc            [f32]→[f32]
0x90  ---  f32.nearest          [f32]→[f32]
0x91  ---  f32.sqrt             [f32]→[f32]
0x92  ---  f32.add              [f32 f32]→[f32]
0x93  ---  f32.sub              [f32 f32]→[f32]
0x94  ---  f32.mul              [f32 f32]→[f32]
0x95  ---  f32.div              [f32 f32]→[f32]
0x96  ---  f32.min              [f32 f32]→[f32]
0x97  ---  f32.max              [f32 f32]→[f32]
0x98  ---  f32.copysign         [f32 f32]→[f32]
0x99  +    f64.abs              [f64]→[f64]
0x9A  -    f64.neg              [f64]→[f64]
0x9B  ???  f64.ceil             [f64]→[f64]
0x9C  ???  f64.floor            [f64]→[f64]        / _ is i32.trunc_s
0x9D  ???  f64.trunc            [f64]→[f64]
0x9E  ---  f64.nearest          [f64]→[f64]
0x9F  sqr  f64.sqrt             [f64]→[f64]
0xA0  +    f64.add              [f64 f64]→[f64]
0xA1  -    f64.sub              [f64 f64]→[f64]
0xA2  *    f64.mul              [f64 f64]→[f64]
0xA3  %    f64.div              [f64 f64]→[f64]
0xA4  &'   f64.min              [f64 f64]→[f64]
0xA5  |'   f64.max              [f64 f64]→[f64]
0xA6  ???  f64.copysign         [f64 f64]→[f64]
0xA7  ???  i32.wrap/i64         [i64]→[i32]
0xA8  ---  i32.trunc_s/f32      [f32]→[i32]
0xA9  ---  i32.trunc_u/f32      [f32]→[i32]
0xAA  ---  i32.trunc_s/f64      [f64]→[i32]
0xAB  ---  i32.trunc_u/f64      [f64]→[i32]
0xAC  ---  i64.extend_s/i32     [i32]→[i64]
0xAD  ---  i64.extend_u/i32     [i32]→[i64]
0xAE  ---  i64.trunc_s/f32      [f32]→[i64]
0xAF  ---  i64.trunc_u/f32      [f32]→[i64]
0xB0  _'   i64.trunc_s/f64      [f64]→[i64]
0xB1  _    i64.trunc_u/f64      [f64]→[i64]
0xB2  ---  f32.convert_s/i32    [i32]→[f32]
0xB3  ---  f32.convert_u/i32    [i32]→[f32]
0xB4  ---  f32.convert_s/i64    [i64]→[f32]
0xB5  ---  f32.convert_u/i64    [i64]→[f32]
0xB6  ---  f32.demote/f64       [f64]→[f32]
0xB7  ---  f64.convert_s/i32    [i32]→[f64]
0xB8  ---  f64.convert_u/i32    [i32]→[f64]
0xB9  F$   f64.convert_s/i64    [i64]→[f64]
0xBA  F$'  f64.convert_u/i64    [i64]→[f64]
0xBB  ---  f64.promote/f32      [f32]→[f64]
0xBC  ---  i32.reinterpret/f32  [f32]→[i32]
0xBD  ???  i64.reinterpret/f64  [f64]→[i64]
0xBE  ---  f32.reinterpret/i32  [i32]→[f32]
0xBF  ???  f64.reinterpret/i64  [i64]→[f64]
0xC0  ---  i32.extend8_s        [i32]→[i32]
0xC1  ---  i32.extend16_s       [i32]→[i32]
0xC2  ???  i64.extend8_s        [i64]→[i64]
0xC3  ---  i64.extend16_s       [i64]→[i64]
0xC4  ???  i64.extend32_s       [i64]→[i64]
