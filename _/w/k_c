#include<stdlib.h>
#include<stdio.h>
#include<stddef.h>
#include<malloc.h>
#include<string.h>
#include<math.h>
#define R return
typedef int32_t I;typedef int64_t J;typedef double F;typedef uint32_t uI;typedef uint64_t uJ;
I __builtin_clz(I x){I r;__asm__("bsr %1, %0" : "=r" (r) : "rm" (x) : "cc");R r^31;}
void trap() { exit(1); }
char *MC;I* MI;J* MJ;F *MF;I ini(I);I bk(I,I);I mk(I,I);I mki(I);void  fr(I);void  decr(I);I til(I);
I ini(I x0){I x1=0;I x2=0;MJ[0>>3]=(J)1130366807310592;MI[128>>2]=(I)x0;x1=256;x2=8;while((x2<(uI)x0)){MI[(4*x2)>>2]=(I)x1;x1=(x1*2);x2=(x2+1);}R x0;}
I bk(I x0,I x1){R (32-(__builtin_clz((7+((x1*((I)MC[x0])))))));}
I mk(I x0,I x1){I x2=0;I x3=0;I x4=0;I x5=0;I x6=0;x2=bk(x0,x1);x3=(4*x2);while(!(MI[x3>>2])){x3=(x3+4);}if((128==x3))trap();x4=MI[x3>>2];MI[x3>>2]=(I)MI[x4>>2];x5=(x3-4);while((x5>=(uI)((4*x2)))){x5=(x5-4);x6=(x4+((1<<((x5/(uI)4)))));MI[x6>>2]=(I)MI[x5>>2];MI[x5>>2]=(I)x6;}MI[x4>>2]=(I)(x1|((x0<<29)));MI[(x4+4)>>2]=(I)1;R x4;}
I mki(I x0){I x1=0;x1=mk(2,1);MI[(x1+4)>>2]=(I)1;MI[(x1+8)>>2]=(I)x0;R x1;}
void  fr(I x0){I x1=0;I x2=0;I x3=0;I x4=0;x1=((MI[x0>>2])>>(uI)29);x2=((MI[x0>>2])&536870911);x3=(8+x0);x4=(4*(bk(x1,x2)));MI[x0>>2]=(I)MI[x4>>2];MI[x4>>2]=(I)x0;;}
void  decr(I x0){I x1=0;if((x0>(uI)255))x1=MI[(x0+4)>>2];MI[(x0+4)>>2]=(I)(x1-1);if((1==x1))fr(x0);;}
I til(I x0){I x1=0;I x2=0;I x3=0;I x4=0;I x5=0;I x6=0;I x7=0;x1=((MI[x0>>2])>>(uI)29);x2=((MI[x0>>2])&536870911);x3=(8+x0);if(!((2==x1)))trap();x4=MI[x3>>2];x5=mk(x1,x4);x6=(8+x5);for(x7=0;x7<x4;x7++){MI[x6>>2]=(I)x7;x6=(x6+4);}decr(x0);R x5;}
// Postfix test interface: e.g. 5 mki til rev fst 0 500 dump
I pop1(I *s, I n, I *x) {
	*x = s[n-1];
	return n-1;
}
I pop2(I *s, I n, I *x, I *y) {
	*x = s[n-2];
	*y = s[n-1];
	return n-2;
}
I push(I *s, I n, I x) {
	s[n] = x;
	return n+1;
}
I f1(I (*f)(I), I *s, I n) {
	printf("%d: ", s[n-1]);
	s[n-1] = f(s[n-1]);
	printf("%d\n", s[n-1]);
	return n;
}
I f2(I (*f)(I,I), I *s, I n) {
	printf("%d %d: ", s[n-2], s[n-1]);
	s[n-2] = f(s[n-2], s[n-1]);
	printf("%d\n", s[n-2]);
	return n-1;
}
I Number(char *s) {
	R strtol(s, (char **)NULL, 10);
}
I Match(char *a, char *b) {
	for (I i=0; ;i++) {
		if (a[i] != b[i]) return 0;
		if (a[i] == 0)    return 1;
	}
}
I Dump(I *s, I n) {
	I x = s[n-2];
	I y = s[n-1];
	I p = 0;
	printf("\n%08x  ", x);
	for (I i=x; i<x+y; i++) {
		printf("%02x", (uint8_t)MC[i]);
		p++;
		if ((i > x) && (p%32 == 0)) {
			printf("\n%08x  ", i+1);
		} else if ((i > x) && (p%4 == 0)) {
			printf(" ");
		}
	}
	return n-2;
}
#define M0 16
I main(int args, char **argv){
	MC=malloc(1<<M0);MI=(I*)MC;MJ=(J*)MC;MF=(F*)MC;
	memset(MC, 0, 1<<M0);
	I stack[32];
	I i, n = 0;
	I x, y, r;
	char *a;
	ini(M0);
	for (i=1; i<args; i++) {
		a = argv[i];
		if (a[0] >= '0' && a[0] <= '9') {
			n = push(stack, n, Number(a));
			continue;
		}
		printf("%s ", argv[i]);
		if (Match("mki", a)) {
			n = f1(mki, stack, n);
		} else if (Match("bk", a)) { n = f2(bk, stack, n);
		} else if (Match("mk", a)) { n = f2(mk, stack, n);
		} else if (Match("til", a)) { n = f1(til, stack, n);
		} else if (Match("dump", a)) {
			n = Dump(stack, n);
		} else {
			printf("arg!");
			trap();
		}
	}
}
