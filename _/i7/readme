$ sh mk
+ k 7.k c.k -e
+ nasm -fbin -oa k.a
+ chmod +x a
+ wc -c a
120 a
+ rm k.a
$ xxd a
00000000: 7f45 4c46 0201 0100 0000 0000 0000 0000  .ELF............
00000010: 0200 3e00 0100 0000 7880 0200 0000 0000  ..>.....x.......
00000020: 4000 0000 0000 0000 0000 0000 0000 0000  @...............
00000030: 0000 0000 4000 3800 0100 4000 0000 0000  ....@.8...@.....
00000040: 0100 0000 0500 0000 0000 0000 0000 0000  ................
00000050: 0080 0200 0000 0000 0080 0200 0000 0000  ................
00000060: 7800 0000 0000 0000 7800 0000 0000 0000  x.......x.......
00000070: 0000 2000 0000 0000                      .. .....
$ â–ˆ


l6 language
syntax is k, meaning is asm (x86/64)
it defines functions, only ints 64bit.
 f:{a:x+y;2*a}
function has args, locals. no globals.
all vars live in registers.
push/pop only at function boundaries.
register allocation is automatic.
body is list of expressions.
an expression is:
 assign: a:x+y
 memory: b[]:y b[i]:y  b[8+8*i]:y   base index displacement scale
 cond:   $[c;a;b]
 loop:   ..
 branch: ..
 label:  `a
 asm:    "mov rax,rdi"  ?
 call:   f g[x;y]
