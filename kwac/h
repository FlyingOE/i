<html><head><script>
var r = "replace this line with wasm binary base64 string"
var s = atob(r)
var b = new Uint8Array(new ArrayBuffer(s.length))
for (var i=0; i<s.length; i++)
	b[i] = s.charCodeAt(i)
var k = new WebAssembly.Instance(new WebAssembly.Module(b));
var f = k.exports.v();
</script>
<meta charset="utf-8">
<style>
	body,textarea { font-family: monospace; margin:0pt; }
	textarea {
		background-color: black;
		color: white;
		border: none;
		resize: none;
	}
	.col { float: left; width:50%; height:100%; }
	.row:after { content: ""; display: table; clear: both }
</style>
</head><body>
<div id="dropbox">
<div class="row"><textarea id="term" class="col"></textarea><canvas id="draw" class="col"></canvas></div></div>
<script>
function utf8ToString(m, r) {
	let s = ""
	for (i = r; m[i]; i++) {
		s += String.fromCharCode(m[i])
	}
	return s;
}
function e(s) {
	return ">" + utf8ToString(m, k.exports.hello())
}

var term = document.getElementById("term")
var hold = false

term.value = window.location.hash.substr(1)
if (term.value) {
	term.value += "\n" + e(term.value) + "\n "
} else {
	term.value = "ESC(toggle hold) ENTER(exec selection or current line) \\c(clear console) \\m(emory)\n "
}
term.onkeydown = function (evt) {
	if (evt.which === 27) {
		evt.preventDefault()
		hold = !hold	
		term.style.border = "none"
		if (hold) 
			term.style.border = "2px solid blue"
	} else if (evt.which === 13) {
		evt.preventDefault()
		if (hold)
			return
		var a = term.selectionStart
		var b = term.selectionEnd
		var s = term.value.substr(a, b)
		if (b == a) {
			s = term.value.substr(0, term.selectionStart).split("\n").pop()
		}
		O("\n")
		s = s.trim()	
		if (s === "\\c") {
			term.value = " "
		} else if (s == "\\m") {
			term.value += "\n" + xxd() + " "
		} else if (s.length && s[0] == '/') {
			ls(s.substring(1))
		} else {
			O(e(s))
		}
		P()
	}
}
function O(s) { term.value += s }
function P() { term.value += "\n "; term.scrollTo(0, term.scrollHeight) }
function xxd() { // dump linear memory
	var m = new Uint8Array(k.exports.m.buffer);
	var out = ""
	var h = 0
	var l = ""
	var n = 0
	for (var i=0; i<m.length; i+=2) {
		if (i==h) {
			// print block header
		}
		l += ("00"+m[i+0].toString(16)).slice(-2)
		l += ("00"+m[i+1].toString(16)).slice(-2) + " "
		n += 5
		if (n == 40) {
			n = 0
			if (l != "0000 0000 0000 0000 0000 0000 0000 0000 ")
				out += ("00000000" + (i-14).toString(16)).slice(-8) + " " + l + "\n"
			l = ""
		}
	}
	return out
}

document.getElementById("dropbox").ondragover = function(ev) {
	ev.preventDefault()
}
document.getElementById("dropbox").ondrop = function(ev) {
	ev.preventDefault()
	if (ev.dataTransfer.items) {
		for (var i = 0; i< ev.dataTransfer.items.length; i++) {
			if (ev.dataTransfer.items[i].kind == 'file') {
				var file = ev.dataTransfer.items[i].getAsFile()
				addfile(file)
			}
		}
	} else
		for (var i = 0; i<ev.dataTransfer.files.length; i++)
			addfile(ev.dataTransfer.files[i])
}
var files = {}
function addfile(f) {
	O("/"+f.name+"\n")
	files[f.name] = f
}
function ls(name) { // list files (empty name), or show
	if (name.length == 0) {
		for (var name in files)
			O("/"+name+"\n")
		return
	}
	var f = files[name]
	if (f == undefined) {
		O("?")
		return
	}
	var r = new FileReader()
	r.onload = function(f) {
		return function(e) {
			O(e.target.result)
			P()
		}
	}(f)
	r.readAsText(f) // readAsArrayBuffer...
}
</script></body></html>
