k's source as a k table (k.k)

t:+`n`t`p`i`s!(!#T;T;P;I;S) /node type parent i-value s-value



node type                    i-value             s-value
 prg     root node           -                   -               first node only
 sym     lib name or `main   -                   libname         root child
 mem     memory segment      #64k blocks         -
 con     constant            -                   name            child type lit
 var     variable            -                   name            child type lit
 lit     literal (con|var)   val(32bit)|C-index  type
 tab     func table entry    index               func name
 dat     data section        $[p=0;C-index;len]  -               comes in pairs
 fun     function            func index          func name
 arg     func argument       arg index           type            child type sym
 sym     symbol              -                   name
 res     return value        ret val index       type            unnamed
 loc     local var decl      loc index           type            child type sym
 ast     func ast root       -                   -               one per func
 stm     statement list      -                   -
 ret     return              -                   -               children: return values
 cal     function call       func node           func name       children: args
 cli     indirect call       func node           -               children: args
 get     get local           arg node            varname
 Get     get global          glo node            varname
 asn     assignment          -                   modifier        children: sym typ [expr..]
 typ     type                -                   type
 cnd     if condition        -                   -               2|3 children: if then [else]
 nop     ignore              -                   -
 jmp     break/continue      1(break)|0(cont)    label
 swc     switch              1(has default)      -               children: expr cases [default]
 for     loop                1(simple)           label           children: (cond|nop) (post|nop) body
 dfr     defer stmt node     -                   -               child type cal
unary operator nodes
 neg|not                     1                   type            1 child
binary operator nodes
 eql|les|mor|gte|lte|and|orr 2                   type            2 children
 add|sub|mul|div|mod|shr|shl	
 xor|neq|ant(andnot)			     
 
types: `i`u`j`k`f`C`I`F!(i32;u32;i64;u64;f64;i8x16;i32x4;f64x2)
			     
the table is generated by github.com/ktye/wg/k.go
number of nodes:     #t             /35826
number of functions: #t{t=`fun}     /487
max depth:           |/dp P         /28


aaron's thesis:
3.2.4:table d(depth) t(primary class) k(sub class) n(name/reference)
3.2.6:I←{(⊂⍵)⌷⍺}
3.3:parent from depth
3.4:
 p:0 0 1 2 0 4 5 5 7 0 9 10 11 12 13 12 12 16 10 18 19 20 19 19 23 10 25
 p@&~3=t p            / (t[p]≠3)/p
 p p@&~3=t p          / p I (t[p]≠3)/p
 @[p;i;p p i:&~3=t p] / p I@{t[⍵]≠3} p    @(At) amends despite the name

