# mk clean
# mk kdb      go install kdb.go
# mk d        copy d.wasm.lz4 to ktye.github.io

set -e
set -x

if [ "$1" = "clean" ]; then
 rm -f *.go k.wat d.wasm d.wat src.map d.wasm.lz4 k.k
 exit 0
fi

rm -f *.go
mv build_go build.go
go run build.go
mv build.go build_go

if [ "$1" = "kdb" ];then
 wg -k . > k.k
 echo "package main" > kdb.go
 echo 'import ( "encoding/binary"; "math"; "math/bits"; "os"; "fmt"; "runtime/debug"; "strconv" )' >> kdb.go
 k k.k ../x/go.k -e 'x:`<go``' | sed -e '1,2d' -e '/func fpush/,+1d' -e '/func fpop/,+1d' >> kdb.go
 cat ../z.go | tr '()' ' '  | awk '/zn := /{print "const zklen = "$4}' >> kdb.go
 cat kdb_go >> kdb.go
 go fmt kdb.go
 go install kdb.go
 mv kdb.go kdb.gox
 rm *.go
 mv kdb.gox kdb.go
 exit 0
fi


wg . > k.wat

cat << EOF > d.wat
(module
(import "env" "fpush"  (func \$fpush (param i64)(param i64)))
(import "env" "fpop"  (func \$fpop ))
(import "env" "Trap" (func \$Trap (param i32)(param i32)(param i32)(param i64)))
EOF

sed -e 1d -e '/func $fpush/,+1d' -e '/func $fpop/,+1d'  k.wat >> d.wat

if [ "$1" = "d" ]; then
 /c/local/wabt/wat2wasm -o d.wasm d.wat
 /c/local/lz4/lz4 -12 d.wasm d.wasm.lz4
 cp d.wasm.lz4  /c/k/ktye.github.io/
 cp src.map /c/k/ktye.github.io/
fi

